#!/bin/bash

echo "üîÑ Iniciando proceso de reinicializaci√≥n completa de Odoo..."

# Funci√≥n para esperar a que PostgreSQL est√© disponible
wait_for_postgres() {
    echo "‚è≥ Esperando a que PostgreSQL est√© disponible..."
    # Usamos $PGHOST, $PGPORT, $PGUSER directamente si ya est√°n exportadas,
    # si no, usamos las variables de la funci√≥n con valores por defecto.
    # Tambi√©n pasamos PGPASSWORD de forma segura a pg_isready.
    while ! PGPASSWORD="$DB_PASSWORD" pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" > /dev/null 2>&1; do
        echo "PostgreSQL no est√° listo - esperando..."
        sleep 2
    done
    echo "‚úÖ PostgreSQL est√° disponible"
}

# Leer configuraci√≥n de la base de datos desde odoo.conf
# Usamos 'head -1' para asegurarnos de tomar solo la primera ocurrencia si hay duplicados (aunque es mejor eliminarlos del .conf)
DB_NAME=$(grep -E "^db_name\s*=" /etc/odoo/odoo.conf | cut -d'=' -f2 | tr -d ' ' | head -1)
DB_USER=$(grep -E "^db_user\s*=" /etc/odoo/odoo.conf | cut -d'=' -f2 | tr -d ' ' | head -1)
DB_PASSWORD=$(grep -E "^db_password\s*=" /etc/odoo/odoo.conf | cut -d'=' -f2 | tr -d ' ' | head -1)
DB_HOST=$(grep -E "^db_host\s*=" /etc/odoo/odoo.conf | cut -d'=' -f2 | tr -d ' ' | head -1)
DB_PORT=$(grep -E "^db_port\s*=" /etc/odoo/odoo.conf | cut -d'=' -f2 | tr -d ' ' | head -1)

# Valores por defecto si no se encuentran en la configuraci√≥n (ajusta si tus defaults son otros)
DB_NAME=${DB_NAME:-odoo}
DB_USER=${DB_USER:-odoo}
DB_HOST=${DB_HOST:-db}
DB_PORT=${DB_PORT:-5432}

# Configurar variables de entorno para PostgreSQL (para comandos psql/dropdb/createdb)
export PGPASSWORD="$DB_PASSWORD"
export PGHOST="$DB_HOST"
export PGPORT="$DB_PORT"
export PGUSER="$DB_USER"

echo "üóÉÔ∏è Configuraci√≥n de base de datos:"
echo "   - Host: $DB_HOST"
echo "   - Puerto: $DB_PORT"
echo "   - Usuario: $DB_USER"
echo "   - Base de datos: $DB_NAME"

# Esperar a que PostgreSQL est√© disponible
wait_for_postgres

echo "üóëÔ∏è Eliminando base de datos existente (si la hay)..."

# Terminar todas las conexiones activas a la base de datos antes de intentar eliminarla
echo "   - Terminando conexiones activas a '$DB_NAME'..."
psql -d "postgres" -c "
    SELECT pg_terminate_backend(pg_stat_activity.pid)
    FROM pg_stat_activity
    WHERE pg_stat_activity.datname = '$DB_NAME'
      AND pid <> pg_backend_pid();
" > /dev/null 2>&1 # Redirige salida y errores a /dev/null para no saturar el log

# Intentar eliminar la base de datos
if dropdb "$DB_NAME" 2>/dev/null; then
    echo "‚úÖ Base de datos '$DB_NAME' eliminada correctamente."
else
    # Comprobar si la base de datos realmente exist√≠a o si hubo un error de permisos/conexi√≥n
    if psql -lqt | cut -d \| -f 1 | grep -wq "$DB_NAME"; then
        echo "‚ùå ERROR: No se pudo eliminar la base de datos '$DB_NAME'. Podr√≠a haber conexiones persistentes o problemas de permisos."
        exit 1 # Salir si la eliminaci√≥n falla y la DB a√∫n existe
    else
        echo "   ‚ÑπÔ∏è Base de datos '$DB_NAME' no exist√≠a o ya se elimin√≥ previamente."
    fi
fi

echo "üÜï Creando nueva base de datos '$DB_NAME'..."
if createdb "$DB_NAME"; then
    echo "‚úÖ Base de datos '$DB_NAME' creada correctamente."
else
    echo "‚ùå ERROR: Fall√≥ la creaci√≥n de la base de datos '$DB_NAME'."
    exit 1 # Salir si la creaci√≥n falla
fi

echo "‚öôÔ∏è Configurando PostgreSQL para evitar crashes..."
# Ejecutar comandos SQL directamente en la base de datos reci√©n creada
psql -d "$DB_NAME" -c "
    -- Configuraciones para evitar timeouts y crashes
    ALTER DATABASE $DB_NAME SET lock_timeout = '0';
    ALTER DATABASE $DB_NAME SET statement_timeout = '0';
    ALTER DATABASE $DB_NAME SET idle_in_transaction_session_timeout = '0';
    ALTER DATABASE $DB_NAME SET deadlock_timeout = '1s';
    ALTER DATABASE $DB_NAME SET log_lock_waits = off;
    ALTER DATABASE $DB_NAME SET log_statement = 'none';
    ALTER DATABASE $DB_NAME SET log_min_duration_statement = -1;
    -- Configuraciones de memoria
    ALTER DATABASE $DB_NAME SET work_mem = '2MB';
    ALTER DATABASE $DB_NAME SET maintenance_work_mem = '32MB';
    ALTER DATABASE $DB_NAME SET temp_buffers = '8MB';
    -- Deshabilitar autovacuum temporalmente durante la inicializaci√≥n
    ALTER DATABASE $DB_NAME SET autovacuum = off;
" 2>/dev/null || echo "   ‚ö†Ô∏è Algunas configuraciones de PostgreSQL no se pudieron aplicar"

echo "üßπ Limpiando cach√© y filestore..."
# Limpiar filestore (archivos adjuntos, im√°genes, etc.)
rm -rf /var/lib/odoo/.local/share/Odoo/filestore/* 2>/dev/null || true
# Limpiar sesiones
rm -rf /var/lib/odoo/.local/share/Odoo/sessions/* 2>/dev/null || true
# Limpiar cach√© de Python
find /var/lib/odoo -name "*.pyc" -delete 2>/dev/null || true
find /var/lib/odoo -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

echo "üîß Recreando directorios necesarios..."
mkdir -p /var/lib/odoo/.local/share/Odoo/filestore/"$DB_NAME"
mkdir -p /var/lib/odoo/.local/share/Odoo/sessions

echo "üöÄ Iniciando Odoo con inicializaci√≥n completa..."
echo "   - Instalando m√≥dulos base y personalizados..."
echo "   - Esto puede tomar varios minutos..."

# Obtener lista de m√≥dulos personalizados para instalar
CUSTOM_MODULES=""
if [ -d "/mnt/extra-addons" ]; then
    for module_dir in /mnt/extra-addons/*/; do
        if [ -d "$module_dir" ] && [ -f "$module_dir/__manifest__.py" -o -f "$module_dir/__openerp__.py" ]; then
            module_name=$(basename "$module_dir")
            if [ -n "$CUSTOM_MODULES" ]; then
                CUSTOM_MODULES="$CUSTOM_MODULES,$module_name"
            else
                CUSTOM_MODULES="$module_name"
            fi
        fi
    done
fi

# Construir comando de inicializaci√≥n
# Primero instalamos solo la base para asegurar que Odoo inicie correctamente
INIT_COMMAND_BASE="odoo -c /etc/odoo/odoo.conf --init=base --stop-after-init --log-level=warn --without-demo=all"

echo "üöÄ Ejecutando inicializaci√≥n de Odoo (solo m√≥dulos esenciales)..."
# Ejecutar inicializaci√≥n de la base
$INIT_COMMAND_BASE

if [ $? -eq 0 ]; then
    echo "‚úÖ Base instalada correctamente."
    
    # Luego, si hay m√≥dulos personalizados, los instalamos
    if [ -n "$CUSTOM_MODULES" ]; then
        echo "   - Instalando m√≥dulos personalizados: $CUSTOM_MODULES"
        INIT_COMMAND_CUSTOM="odoo -c /etc/odoo/odoo.conf --init=\"$CUSTOM_MODULES\" --stop-after-init --log-level=warn --without-demo=all"
        $INIT_COMMAND_CUSTOM
        
        if [ $? -ne 0 ]; then
            echo "‚ö†Ô∏è Algunos m√≥dulos personalizados fallaron durante la instalaci√≥n. Verifica los logs de Odoo."
        else
            echo "‚úÖ M√≥dulos personalizados instalados correctamente."
        fi
    fi
    
    echo "‚úÖ Inicializaci√≥n completa del sistema Odoo."
    echo "‚è≥ Esperando estabilizaci√≥n del sistema antes de habilitar autovacuum..."
    sleep 10 # Darle un momento a Odoo para consolidar los cambios

    echo "üßπ Habilitando autovacuum nuevamente en PostgreSQL..."
    psql -d "$DB_NAME" -c "
        ALTER DATABASE $DB_NAME SET autovacuum = on;
    " > /dev/null 2>&1 || true # Si falla, no es cr√≠tico para el inicio

    echo "üåê Iniciando servidor Odoo..."
    # Finalmente, iniciar el servidor Odoo en modo normal
    exec odoo -c /etc/odoo/odoo.conf --log-level=info
else
    echo "‚ùå Error cr√≠tico durante la inicializaci√≥n de la base de Odoo. Consulta los logs anteriores."
    exit 1
fi